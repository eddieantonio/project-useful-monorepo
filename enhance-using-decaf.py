#!/usr/bin/env python3

"""
enhance-using-decaf.py -- enhance error messages using Decaf CLI

REQUIREMENTS:
    sample.pickle
    decaf-cli.jar -- Available here: https://github.com/eddieantonio/decaf/releases/tag/v3.3-cli

DESCRIPTION:
    This uses the command line version of Decaf to enhance error messages.
    The error messages are stored for each scenario.

OUTPUTS:
    decaf.pickle -- enhanced error messages for each (srcml_path, version) pair
"""

import logging
import os
import pickle
import subprocess
from contextlib import contextmanager
from pathlib import Path
from tempfile import TemporaryDirectory

try:
    from tqdm import tqdm
except ImportError:
    # If tqdm is not installed, pass through the iterable:
    def tqdm(iterable, *args, **kwargs):  # type: ignore
        return iterable


HERE = Path(__file__).parent
DECAF_LOCATION = (HERE / "decaf-cli.jar").resolve()

logger = logging.getLogger(__name__)

with open("sample.pickle", "rb") as f:
    ALL_SCENARIOS = pickle.load(f)


# Autogenerated by GitHub Copilot:
@contextmanager
def cd(directory):
    """
    Allows to change the current working directory for a block of code.

    Will alwasys cd back to the previous directory, even if there was an exception.
    """
    cwd = Path.cwd()
    try:
        os.chdir(directory)
        yield
    finally:
        os.chdir(cwd)


def enhance_error_message_with_decaf(scenario):
    """
    Uses the Decaf CLI to enhance the error message in the given scenario.
    """
    unit = scenario["unit"]
    filename = unit.pems[0].filename
    if filename == "<unknown>":
        filename = "Unknown.java"

    # Running Decaf in a temporary directory will make the error message cleaner,
    # because it will not include the full path to the file.
    with TemporaryDirectory() as tempdir:
        tempdir = Path(tempdir)
        with cd(tempdir):
            # Write the source code within the temporary directory:
            java_file = tempdir / filename
            java_file.write_text(unit.source_code)

            # Run Decaf:
            command = ["java", "-jar", str(DECAF_LOCATION), filename]
            return subprocess.check_output(command, encoding="utf-8")


enhanced_error_mesages = {}
for scenario in tqdm(ALL_SCENARIOS):
    key = (scenario["xml_filename"], scenario["version"])
    try:
        enhanced_error_mesages[key] = enhance_error_message_with_decaf(scenario)
    except subprocess.CalledProcessError as error:
        logger.exception("Decaf failed on %s", key)

with open("decaf.pickle", "wb") as pickle_file:
    pickle.dump(enhanced_error_mesages, pickle_file)
